{
	"name" : "Velvet",

	"author" : "Daniel Zerbino[1] , Ewan Birney",

	"version" : "0.7.01",

	"description" : "Velvet is an algorithm package that has been designed to deal with de novo genome assembly and short read sequencing alignments.",

	"documentation" : [
		"https://www.ebi.ac.uk/~zerbino/velvet/",
		"https://www.ebi.ac.uk/~zerbino/velvet/Manual.pdf",
		"http://seqanswers.com/wiki/Velvet",
		"http://wiki.bioinformatics.ucdavis.edu/index.php/Illumina_assembly_using_velvet"
	],

	"setup" : [
		"make"
	],

	"requiredMemory": 12288,

	"commands" :[
		{
			"name" : "velveth",

			"command" : "velveth",

			"description" : "construct the dataset for the following program, velvetg, and indicate to the system what each sequence file represents.",

	            "priority" : 2,

			"argumentsProcessor" : "processor1",

			"arguments" : [
				{
					"name" : "output_directory",
					"type" : "directory",
					"required" : "true",
					"description" : "Directory where wiil be output files"
				},

				{
					"name" : "strand_specific",
					"type" : "string",
					"required" : "false",
					"description" : "Strand specific sequencing"
				},

				{
					"name" : "m,M,s",
					"type" : "string",
					"required" : "false",
					"description" : "Multiple k-mers: m â‰¤ k < M with a step of s"
				},

				{
					"name" : "noHash",
					"type" : "string",
					"required" : "false",
					"description" : " Preprocessing the Sequences file"
				},

				{
					"name" : "reuse_Sequences",
					"type" : "string",
					"required" : "false",
					"description" : " Preprocessing the Sequences file"
				},

				{
					"name" : "create_binary",
					"type" : "string",
					"required" : "false",
					"description" : "Using the binary version of Sequences"
				},

				{
					"name" : "hash_length",
					"type" : "int",
					"required" : "true",
					"description" : "Also known as k-mer length, corresponds to the length, in base pairs, of the words being hashed"
				},

				{
					"name" : "file_format",
					"type" : "string",
					"required" : "false",
					"description" : "Allows you to write as many filenames as you wish without having to re-type identical descriptors"
				},

				{
					"name" : "read_type",
					"type" : "string",
					"required" : "false",
					"description" : "Read type"
				},

				{
					"name" : "filename",
					"type" : "file",
					"required" : "false",
					"description" : "Name of file to analyse"
				}
			],
				"outputs" : [
					{
						"name" : "sequence",
						"description" : "",
						"type" : "directory_dependent",
						"input_name" : "output_directory",
						"value" : "Sequences"
					},

					{
						"name" : "roadmaps",
						"description" : "",
						"type" : "directory_dependent",
						"input_name" : "output_directory",
						"value" : "Roadmaps"
					},

					{
						"name" : "log",
						"description" : "",
						"type" : "directory_dependent",
						"input_name" : "output_directory",
						"value" : "Log"
					}
				]
		},

		{
			"name" : "velvetg",

			"command" : "velvetg",

			"description" : "Build the Brujin graph and then manipulate it.",

	            "priority" : 1,

			"argumentsProcessor" : "processorVelvetG",

			"arguments" : [
				{
					"name" : "output_directory",
					"type" : "directory",
					"required" : "true",
					"description" : "Directory where wiil be output files"
				},

				{
					"name" : "-cov_cutoff",
					"type" : "float",
					"required" : "false",
					"description" : "removal of low coverage nodes AFTER tour bus or allow the system to infer it (default: no removal)"
				},

				{
					"name" : "-min_contig_lgth",
					"type" : "int",
					"required" : "false",
					"description" : "minimum contig length exported to contigs.fa file (default: hash length * 2)"
				},

				{
					"name" : "-max_coverage",
					"type" : "float",
					"required" : "false",
					"description" : "removal of high coverage nodes AFTER tour bus (default: no removal)"
				},

				{
					"name" : "-exp_cov",
					"type" : "float",
					"required" : "false",
					"description" : "expected coverage of unique regions or allow the system to infer it (default: no long or paired-end read resolution)"
				},

				{
					"name" : "-ins_length",
					"type" : "int",
					"required" : "false",
					"description" : "expected distance between two paired-end reads in the respective short-read dataset (default: no read pairing)"
				},

				{
					"name" : "-shortMatePaired",
					"type" : "string",
					"required" : "false",
					"description" : "for mate-pair libraries, indicate that the library might be contaminated with paired-end reads (default no)"
				},

				{
					"name" : "-ins_length_long",
					"type" : "int",
					"required" : "false",
					"description" : "expected distance between two long paired-end reads (default: no read pairing)"
				},

				{
					"name" : "-scaffolding",
					"type" : "string",
					"required" : "false",
					"description" : "scaffolding of contigs used paired end information (default: on)"
				},

				{
					"name" : "-ins_length_long_sd",
					"type" : "int",
					"required" : "false",
					"description" : "est. standard deviation of respective dataset (default: 10% of corresponding length)"
				},

				{
					"name" : "-ins_length_sd",
					"type" : "int",
					"required" : "false",
					"description" : "est. standard deviation of respective dataset (default: 10% of corresponding length)"
				},

				{
					"name" : "-ins_length2_sd",
					"type" : "int",
					"required" : "false",
					"description" : "est. standard deviation of respective dataset (default: 10% of corresponding length)"
				},

				{
					"name" : "-ins_length2",
					"type" : "int",
					"required" : "false",
					"description" : "expected distance between two paired-end reads in the respective short-read dataset (default: no read pairing)"
				},

				{
					"name" : "-read_trkg",
					"type" : "string",
					"required" : "false",
					"description" : "tracking of short read positions in assembly (default: no tracking)"
				},

				{
					"name" : "-amos_file",
					"type" : "string",
					"required" : "false",
					"description" : "export assembly to AMOS file (default: no export)"
				},

				{
					"name" : "-amos_file",
					"type" : "string",
					"required" : "false",
					"description" : "export assembly to AMOS file (default: no export)"
				},

				{
					"name" : "-unused_reads",
					"type" : "string",
					"required" : "false",
					"description" : "export unused reads in UnusedReads.fa file (default: no)"
				},

				{
					"name" : "-max_branch_length",
					"type" : "int",
					"required" : "false",
					"description" : "maximum length in base pair of bubble (default: 100)"
				},

				{
					"name" : "-max_divergence",
					"type" : "float",
					"required" : "false",
					"description" : "maximum divergence rate between two branches in a bubble (default: 0.2)"
				},

				{
					"name" : "-max_gap_count",
					"type" : "int",
					"required" : "false",
					"description" : "maximum number of gaps allowed in the alignment of the two branches of a bubble (default: 3)"
				},

				{
					"name" : "-min_pair_count",
					"type" : "int",
					"required" : "false",
					"description" : "minimum number of paired end connections to justify the scaffolding of two long contigs (default: 5)"
				},

				{
					"name" : "-long_cov_cutoff",
					"type" : "float",
					"required" : "false",
					"description" : "removal of nodes with low long-read coverage AFTER tour bus(default: no removal)"
				},

				{
					"name" : "-coverage_mask",
					"type" : "int",
					"required" : "false",
					"description" : "minimum coverage required for confident regions of contigs (default: 1)"
				},

				{
					"name" : "-long_mult_cutoff",
					"type" : "int",
					"required" : "false",
					"description" : "minimum number of long reads required to merge contigs (default: 2)"
				},

				{
					"name" : "-alignments",
					"type" : "string",
					"required" : "false",
					"description" : "export a summary of contig alignment to the reference sequences (default: no)"
				},

				{
					"name" : "-exportFiltered",
					"type" : "string",
					"required" : "false",
					"description" : "export the long nodes which were eliminated by the coverage filters (default: no)"
				},

				{
					"name" : "-clean",
					"type" : "string",
					"required" : "false",
					"description" : "remove all the intermediary files which are useless for recalculation (default : no)"
				},

				{
					"name" : "-very_clean",
					"type" : "string",
					"required" : "false",
					"description" : "remove all the intermediary files (no recalculation possible) (default: no)"
				},

				{
					"name" : "-paired_exp_fraction",
					"type" : "double",
					"required" : "false",
					"description" : "remove all the paired end connections which less than the specified fraction of the expected count (default: 0.1)"
				},

				{
					"name" : "-conserveLong",
					"type" : "string",
					"required" : "false",
					"description" : "preserve sequences with long reads in them (default no)"
				}
			],
				"outputs" : [
					{
						"name" : "stats",
						"description" : "",
						"type" : "directory_dependent",
						"input_name" : "output_directory",
						"value" : "stats.txt"
					},

					{
						"name" : "preGraph",
						"description" : "",
						"type" : "directory_dependent",
						"input_name" : "output_directory",
						"value" : "PreGraph"
					},

					{
						"name" : "lastGraph",
						"description" : "",
						"type" : "directory_dependent",
						"input_name" : "output_directory",
						"value" : "LastGraph"
					},
					{
						"name" : "graph",
						"description" : "",
						"type" : "directory_dependent",
						"input_name" : "output_directory",
						"value" : "Graph"
					},
					{
						"name" : "contigs_fa",
						"description" : "",
						"type" : "directory_dependent",
						"input_name" : "output_directory",
						"value" : "contigs.fa"
					},

					{
						"name" : "log",
						"description" : "",
						"type" : "directory_dependent",
						"input_name" : "output_directory",
						"value" : "Log"
					}
				]
		}
	]
}
